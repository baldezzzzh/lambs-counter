{"version":3,"sources":["Components/Counter/CounterButton.tsx","redux/counter-reducer.ts","Components/Counter/CounterButtons.tsx","Components/Counter/CounterBlock.tsx","Components/Noerror.tsx","Components/Error.tsx","Components/Counter/Counter.tsx","Components/CounterSetter/ValueLine.tsx","Components/CounterSetter/CounterValuesSetter.tsx","Components/CounterSetter/CounterSetter.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","redux/local-storage.ts","index.tsx","Components/Counter/Counter.module.css"],"names":["CounterButton","name","callback","disabled","onClick","className","classes","button","initState","counter","startValue","maxValue","error","disabledException","setErrorAC","errorValue","type","setDisabledAC","disabledValue","CounterButtons","useSelector","state","dispatch","useDispatch","buttons","resetCounterAC","CounterBlock","text","Noerror","Error","Counter","ValueLine","getInputValue","value","onChange","e","inputValue","currentTarget","CounterValuesSetter","getMaxValueAC","getStartValueAC","CounterSetter","setCounterValueAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","console","log","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5eb9bd2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\n\r\ntype CounterButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst CounterButton = ({name,callback, disabled}:CounterButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return(\r\n        <button disabled={disabled} onClick={onClickHandler} className={classes.button}>{name}</button>\r\n    )\r\n}\r\n\r\nexport default  CounterButton","import React from \"react\";\r\n\r\nexport type CounterType = {\r\n    counter: number\r\n    startValue: number\r\n    maxValue: number\r\n    error: boolean\r\n    disabled: boolean\r\n    disabledException: boolean\r\n}\r\n\r\nconst initState: CounterType = {\r\n    counter: 0,\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    error: false,\r\n    disabled: false,\r\n    disabledException: false\r\n}\r\n\r\nexport const counterReducer = ( state: CounterType = initState, action: GenericType ) => {\r\n    switch (action.type){\r\n        case \"INC-COUNTER\": {\r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            }\r\n        }\r\n        case \"RESET-COUNTER\": {\r\n            return {\r\n                ...state,\r\n                counter: action.startValue\r\n            }\r\n        }\r\n        case \"GET-START-VALUE\": {\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue,\r\n            }\r\n        }\r\n        case \"SET-START-VALUE\": {\r\n            return {\r\n                ...state,\r\n                counter: action.startValue,\r\n                disabledException: action.value\r\n            }\r\n        }\r\n        case \"GET-MAX-VALUE\": {\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        }\r\n        case \"SET-ERROR\": {\r\n            return {\r\n                ...state,\r\n                error: action.errorValue\r\n            }\r\n        }\r\n        case \"SET-DISABLED\": {\r\n            return {\r\n                ...state,\r\n                disabled: action.disabledValue\r\n            }\r\n        }\r\n        case \"SET-DISABLED-EXCEPTION\": {\r\n            return {\r\n                ...state,\r\n                disabledException: action.disabledValue\r\n\r\n            }\r\n        }\r\n        case \"SET-START-VALUE-TO-LOCAL-STORAGE\": {\r\n            return {\r\n                ...state,\r\n                counter: action.value\r\n            }\r\n        }\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport type GenericType =\r\n    incCounterACType\r\n    | resetCounterACType\r\n    | getStartValueACType\r\n    | setCounterValueACType\r\n    | getMaxValueACType\r\n    | setErrorACType\r\n    | setDisabledACType\r\n    |setDisabledExceptionACType\r\n    | setStartValueToLocalStorageACType;\r\n\r\nexport type incCounterACType = ReturnType<typeof incCounterAC>\r\nexport const incCounterAC = () =>{\r\n    return{\r\n        type: 'INC-COUNTER'\r\n    } as const\r\n}\r\n\r\nexport type resetCounterACType = ReturnType<typeof resetCounterAC>\r\nexport const resetCounterAC = (startValue: number) =>{\r\n    return{\r\n        type: 'RESET-COUNTER',\r\n        startValue\r\n    } as const\r\n}\r\nexport type getStartValueACType = ReturnType<typeof getStartValueAC>\r\nexport const getStartValueAC = (startValue: number) =>{\r\n    return{\r\n        type: 'GET-START-VALUE',\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport type setCounterValueACType = ReturnType<typeof setCounterValueAC>\r\nexport const setCounterValueAC = (startValue: number, value: boolean) =>{\r\n    return{\r\n        type: 'SET-START-VALUE',\r\n        startValue,\r\n        value\r\n\r\n    } as const\r\n}\r\n\r\nexport type getMaxValueACType = ReturnType<typeof getMaxValueAC>\r\nexport const getMaxValueAC = (maxValue: number) =>{\r\n    return{\r\n        type: 'GET-MAX-VALUE',\r\n        maxValue\r\n    } as const\r\n}\r\n\r\nexport type setErrorACType = ReturnType<typeof setErrorAC>\r\nexport const setErrorAC = (errorValue: boolean) =>{\r\n    return{\r\n        type: 'SET-ERROR',\r\n        errorValue\r\n    } as const\r\n}\r\n\r\nexport type setDisabledACType = ReturnType<typeof setDisabledAC>\r\nexport const setDisabledAC = (disabledValue: boolean) =>{\r\n    return{\r\n        type: 'SET-DISABLED',\r\n        disabledValue\r\n    } as const\r\n}\r\n\r\nexport type setDisabledExceptionACType = ReturnType<typeof setDisabledExceptionAC>\r\nexport const setDisabledExceptionAC = (disabledValue: boolean) =>{\r\n    return{\r\n        type: 'SET-DISABLED-EXCEPTION',\r\n        disabledValue\r\n    } as const\r\n}\r\n\r\nexport type setStartValueToLocalStorageACType = ReturnType<typeof setStartValueToLocalStorageAC>\r\nexport const setStartValueToLocalStorageAC = (value: number) =>{\r\n    return{\r\n        type: 'SET-START-VALUE-TO-LOCAL-STORAGE',\r\n        value\r\n    } as const\r\n}","import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\nimport CounterButton from \"./CounterButton\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {CounterType, incCounterAC, resetCounterAC} from \"../../redux/counter-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\n\r\n\r\ntype CounterButtonsPropsType = {\r\n\r\n}\r\n\r\nconst CounterButtons = ({}:CounterButtonsPropsType) => {\r\n\r\n    let startValue = useSelector<RootReducerType, number>(state => state.counter.startValue)\r\n    let counter = useSelector<RootReducerType, number>(state => state.counter.counter)\r\n    let maxValue = useSelector<RootReducerType, number>(state => state.counter.maxValue)\r\n    let error = useSelector<RootReducerType, boolean>(state => state.counter.error)\r\n    let disabledException = useSelector<RootReducerType, boolean>(state => state.counter.disabledException)\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const incCounter = () => {\r\n        if (counter < maxValue) {\r\n            dispatch(incCounterAC())\r\n        }\r\n    }\r\n    const resetCounter = () => {\r\n        if (counter > 0 && counter <= maxValue){\r\n            dispatch(resetCounterAC(startValue))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className={classes.buttons}>\r\n            <CounterButton disabled={counter === maxValue || error || disabledException} name={'inc'} callback={incCounter}/>\r\n            <CounterButton disabled={counter === 0} name={'reset'} callback={resetCounter}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  CounterButtons","import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\nimport {CounterType} from \"../../redux/counter-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\n\r\n\r\n\r\n\r\nconst CounterBlock = () => {\r\n\r\n    let maxValue = useSelector<RootReducerType, number>(state => state.counter.maxValue)\r\n    let counter = useSelector<RootReducerType, number>(state => state.counter.counter)\r\n\r\n    return (\r\n        <p className={`${classes.text} ${counter === maxValue ? classes.error : ''}`}>{counter}</p>\r\n    )\r\n}\r\n\r\nexport default CounterBlock","import React from \"react\";\r\nimport CounterBlock from \"./Counter/CounterBlock\";\r\nimport {CounterType} from \"../redux/counter-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../redux/store\";\r\n\r\n\r\n\r\n\r\nconst Noerror = () => {\r\n\r\n    let counter = useSelector<RootReducerType, number>(state => state.counter.counter)\r\n    return(\r\n        <div>\r\n            {counter === 0 ? <p className={'counter_entry-text'}>Enter values and press Set</p> : <CounterBlock/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Noerror","import React from \"react\";\r\n\r\nconst Error = () => {\r\n    return(\r\n        <div className={'counter_entry-text'}>\r\n            <p className={'errorText'}>Incorrect value!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\nimport CounterBlock from \"./CounterBlock\";\r\nimport CounterButtons from \"./CounterButtons\";\r\nimport Noerror from \"../Noerror\";\r\nimport Error from \"../Error\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\nimport {CounterType} from \"../../redux/counter-reducer\";\r\n\r\ntype CounterPropsType = {\r\n\r\n}\r\n\r\nconst Counter = ({}: CounterPropsType) => {\r\n\r\n    let error = useSelector<RootReducerType, boolean>(state => state.counter.error)\r\n\r\n    return (\r\n        <div className={'counter'}>\r\n            {error ? <Error/> : <Noerror/>}\r\n            <CounterButtons/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {log} from \"util\";\r\nimport {on} from \"cluster\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\nimport {setDisabledExceptionAC} from \"../../redux/counter-reducer\";\r\n\r\ntype ValueLinePropsType = {\r\n    name: string\r\n    getInputValue: (value : number) => void\r\n    value: number\r\n}\r\n\r\n\r\nconst ValueLine = ({name, getInputValue, value}:ValueLinePropsType) => {\r\n    let error = useSelector<RootReducerType, boolean>(state => state.counter.error)\r\n    let dispatch = useDispatch()\r\n    const onChangeHandler = (e: any) => {\r\n        const inputValue = +e.currentTarget.value\r\n        getInputValue(inputValue)\r\n        dispatch(setDisabledExceptionAC(true))\r\n    }\r\n\r\n    return(\r\n        <div className={'valueLine'}>\r\n            <p>{name}</p>\r\n            <input value={value} type=\"number\" onChange={ onChangeHandler} className={ error ? 'errorInput' : ''}/>\r\n        </div>\r\n    )\r\n}\r\nexport default ValueLine","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport ValueLine from \"./ValueLine\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\nimport {CounterType, getMaxValueAC, getStartValueAC, setDisabledAC, setErrorAC} from \"../../redux/counter-reducer\";\r\n\r\ntype CounterValuesSetterPropsType = {\r\n\r\n}\r\n\r\nconst CounterValuesSetter = ({}:CounterValuesSetterPropsType) => {\r\n\r\n\r\n    let startValue = useSelector<RootReducerType, number>(state => state.counter.startValue)\r\n    let maxValue = useSelector<RootReducerType, number>(state => state.counter.maxValue)\r\n    let dispatch = useDispatch()\r\n    const getStartInputValue = (value : number) => {\r\n        dispatch(getStartValueAC(value))\r\n        startValue = value\r\n        if (startValue < 0){\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        } else if (startValue === maxValue) {\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        } else if (startValue > maxValue) {\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        }\r\n        else{\r\n            dispatch(setErrorAC(false))\r\n            dispatch(setDisabledAC(false))\r\n        }\r\n\r\n    }\r\n    const getMaxInputValue = (value: number) =>{\r\n        dispatch(getMaxValueAC(value))\r\n        maxValue = value\r\n        if (maxValue < 0) {\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        }\r\n        else if ( startValue > maxValue){\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        }\r\n        else if ( startValue < 0 ){\r\n            dispatch(setErrorAC(true))\r\n            dispatch(setDisabledAC(true))\r\n        }\r\n        else {\r\n            dispatch(setErrorAC(false))\r\n            dispatch(setDisabledAC(false))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <ValueLine name={'max value'} getInputValue={getMaxInputValue}  value={maxValue}/>\r\n            <ValueLine name={'start value'} getInputValue={getStartInputValue}  value={startValue}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterValuesSetter","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport CounterButton from \"../Counter/CounterButton\";\r\nimport CounterValuesSetter from \"./CounterValuesSetter\";\r\nimport {CounterType, setCounterValueAC} from \"../../redux/counter-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../redux/store\";\r\n\r\n\r\n\r\ntype CounterSetterPropsType = {\r\n\r\n }\r\n\r\nconst CounterSetter = ({}: CounterSetterPropsType) => {\r\n\r\n    let startValue = useSelector<RootReducerType, number>(state => state.counter.startValue)\r\n    let disabled = useSelector<RootReducerType, boolean>(state => state.counter.disabled)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    return(\r\n        <div className={'counter'}>\r\n            <CounterValuesSetter />\r\n            <CounterButton  disabled={disabled} name={'Set'} callback={()=>{dispatch(setCounterValueAC(startValue, false))}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterSetter","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from \"./Components/Counter/Counter\";\nimport CounterSetter from \"./Components/CounterSetter/CounterSetter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"./redux/store\";\nimport {CounterType, incCounterAC, resetCounterAC} from \"./redux/counter-reducer\";\n\nfunction App() {\n\n    // useEffect(() => {\n    //     let valueAsString = localStorage.getItem('counterValue')\n    //     if (valueAsString) {\n    //         let newValue = JSON.parse(valueAsString)\n    //         // setCounter(newValue)\n    //     }\n    // }, [])\n\n    // useEffect( () => {\n    //     localStorage.setItem('counterValue', JSON.stringify(counter))\n    // }, [counter] )\n    //\n    // useEffect(() => {\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (startValueAsString) {\n    //         let newValue = JSON.parse(startValueAsString)\n    //         // setStartValue(newValue)\n    //     }\n    // }, [])\n\n    // useEffect( () => {\n    //     localStorage.setItem('startValue', JSON.stringify(startValue))\n    // }, [startValue] )\n    //\n    // useEffect(() => {\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     if (maxValueAsString) {\n    //         let newValue = JSON.parse(maxValueAsString)\n    //         setMaxvalue(newValue)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    // }, [maxValue])\n\n\n\n\n\n\n\n    return (\n        <div className=\"App\">\n            <CounterSetter/>\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"./local-storage\";\r\nimport {combineReducers, createStore, Store} from \"redux\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport type  RootReducerType = ReturnType<typeof RootReducer>\r\n\r\nexport let store: Store<RootReducerType> = createStore(RootReducer, loadState())\r\n\r\nstore.subscribe(()=> {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\n\r\n//@ts-ignore\r\nconsole.log(window.store = store)","import {RootReducerType} from \"./store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state: RootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('counter-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Counter_text__3Usin\",\"buttons\":\"Counter_buttons__9zOP3\",\"button\":\"Counter_button__27XiW\",\"error\":\"Counter_error__3BrRc\"};"],"sourceRoot":""}